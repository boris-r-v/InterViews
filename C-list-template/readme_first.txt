Реализация двухсвязанного списка на С.
Тип списка вычисляется на этапе компиляции, позволяет хранить структуры разных типов (как шаблоны в С++)

---------------------------------
ОГРАНИЧЕНИЕ: Работает в блоке ограниченным define и undef
#define E some_data_struct
#include "list.h"

    LIST_GET_TYPE *nlist = LIST_CREATE();
    Node* e1 = get_some_data_struct
    Node* e2 = get_some_data_struct
    Node* e3 = get_some_data_struct
    Node* e4 = get_some_data_struct
    
    LIST_PUSH_BACK( nlist, e1 );
    LIST_PUSH_BACK( nlist, e2 );
    LIST_PUSH_FRONT( nlist, e3 );
    LIST_PUSH_FRONT( nlist, e4 );
#undef E
Другими словами список шаблонный но его удобно использовать либо в отельном блоке либо в отдельном файле(единицы трансляции)
----------------------------

Доступные операции со списком

0. Тип списка LIST_GET_TYPE, тип ноды списка LIST_NODE_GET_TYPE.
1. Создание списка LIST_CREATE. Использование: LIST_GET_TYPE *nlist = LIST_CREATE();
2. Удаление списка LIST_DELETE. Использование: LIST_DELETE ( nlist );
3. Добавить элемент в начало списка LIST_PUSH_FRONT. Использование:  LIST_PUSH_FRONT( список, элемент_списка );
4. Удалить элемент из начала списка LIST_POP_FRONT и вернуть указатель на него.  Использование:  LIST_POP_FRONT( список )
5. Добавить элемент в конец списка LIST_PUSH_BACK. Использование:  LIST_PUSH_BACK( список, элемент_списка );
6. Удалить элемент из конца списка LIST_POP_BACK и вернуть указатель на него.  Использование:  LIST_POP_BACK( список )
7. Вернуть указатель на элемент позиции pos LIST_GET_POS. Использование: LIST_GET_POS( список, порядковый_номер_элемента_начиная_с_1 ); Если нет позиции вернет NULL.
8. Вставить элемент в список в указанную позицию LIST_INSERT. Использование: LIST_INSERT( список, позиция_элемента_в_списке_начиная_с_1, элемент_списка ); Если позиции нет в списке вернет 1, если успешно вставил - то 0
9. Удалить элемент из списка изказанной позиции и вернуть указатель на удаленный элемент LIST_REMOVE. Использование: LIST_REMOVE( спиcок, позиция_элемента_в_списке_начиная_с_1 ); Если нет позиции вернет NULL.
10. Указатель на первый элемент списка LIST_BEGIN_NODE. Использование:  LIST_BEGIN_NODE( список )
11. Указатель на следующую ноду от текущей LIST_NEXT_NODE. Использование:  LIST_NEXT_NODE( елемент_списка )
